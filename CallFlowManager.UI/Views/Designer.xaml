<UserControl x:Class="CallFlowManager.UI.Views.Designer"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
             xmlns:workFlows="clr-namespace:CallFlowManager.UI.ViewModels.WorkFlows"
             xmlns:converters="clr-namespace:CallFlowManager.UI.Converters"
             xmlns:myCtrls="clr-namespace:CallFlowManager.UI.Views"
             xmlns:validationRules="clr-namespace:CallFlowManager.UI.Common.ValidationRules"
             mc:Ignorable="d"
             Name="WindowDesigner"
             d:DesignHeight="900" d:DesignWidth="900">

    <UserControl.Resources>
        <converters:NoDataConverter x:Key="NoDataConverter" />
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
        <converters:NullToBooleanTrue x:Key="NullToBooleanTrue" />
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" True="Collapsed" False="Visible"/>
        <converters:NullVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <converters:MultiValueBoolConverter x:Key="MultiValueBoolConverter"/>

        <Style x:Key="DataGridColumnHeaderStyle" TargetType="DataGridColumnHeader">
            <Setter Property="FontWeight" Value="Normal"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
        </Style>
        <Style x:Key="DataGridStyle" TargetType="DataGrid">
            <Setter Property="FontWeight" Value="Normal"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="GridLinesVisibility" Value="None" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="HeadersVisibility" Value="Column" />
        </Style>
    </UserControl.Resources>

    <Grid Margin="5" Name = "MainGrid">
        <Grid.Resources>
            <BooleanToVisibilityConverter x:Key="BoolToVis"/>
        </Grid.Resources>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <ComboBox Grid.Row="0" 
                  Grid.Column="0" 
                  Width="Auto" 
                  Height="26" 
                  Margin="10,0,10,0"
                  IsTextSearchEnabled="True"
                  IsTextSearchCaseSensitive="False"
                  TextSearch.TextPath="Name"
                  IsEditable="False"
                  ItemsSource="{Binding WorkFlows}" 
                  SelectedItem="{Binding SelectedWorkFlow}" 
                  DisplayMemberPath="Name"/>

        <StackPanel Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" Orientation="Horizontal">
            <Button Focusable="False" IsEnabled="{Binding IsEnabled}" Command="{Binding LoadCommand}" Width="53">Refresh</Button>
            <Button Focusable="False" IsEnabled="{Binding IsEnabled}" Command="{Binding CreateCommand}" Width="53">Save</Button>
            <Button Focusable="False" IsEnabled="False" Command="{Binding DeleteCommand}" Width="53">Delete</Button>
            <Button Focusable="False" IsEnabled="{Binding IsEnabled}" Command="{Binding ClearCommand}" Width="40">Clear</Button>
            <Button Focusable="False" IsEnabled="{Binding IsEnabled}" Command="{Binding DeactivateCommand}" Width="70">Deactivate</Button>
            <controls:ProgressRing IsActive="{Binding IsLoading}" Visibility="Visible" Foreground="{DynamicResource AccentColorBrush}"/>
            <TextBlock TextWrapping="Wrap" Text="{Binding StatusBar}" Width="Auto" Margin="0,17,0,0"/>
        </StackPanel>

        <myCtrls:LogWindow Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3"></myCtrls:LogWindow>

        <StackPanel Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="2" Margin="10,5,3,5" Background="#00AEDE">
            <Label Content="General" Foreground="White"/>
        </StackPanel>

        <StackPanel Grid.Column="2" Grid.Row="2" Margin="3,5,10,5" Background="#00AEDE">
            <Label Content="Business Hours" Foreground="White"/>
        </StackPanel>

        <StackPanel Grid.Column="0" Grid.Row="3" Orientation="Vertical" Margin="10,10,10,0">
            <Label Content="Display Name"/>
            <!--<TextBox Text="{Binding Path=CurrentWorkFlow.Name}" TextWrapping="WrapWithOverflow"/>-->
            <TextBox TextWrapping="WrapWithOverflow">
                <TextBox.Text>
                    <Binding Path="CurrentWorkFlow.Name" UpdateSourceTrigger="PropertyChanged"  ValidatesOnDataErrors="True">
                        <Binding.ValidationRules>
                            <validationRules:RequiredValidationRule IsRequired="True" ValidationStep="RawProposedValue" />
                            <validationRules:AlphaNumericSymbolsRule ValidationStep="RawProposedValue" />
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>

            <Label Content="Number" Margin="0,10,0,0"/>

            <!--<TextBox Text="{Binding Path=CurrentWorkFlow.Number, UpdateSourceTrigger=PropertyChanged}"/>-->
            <TextBox>
                <TextBox.Text>
                    <Binding Path="CurrentWorkFlow.Number" UpdateSourceTrigger="PropertyChanged"  ValidatesOnDataErrors="True">
                        <Binding.ValidationRules>
                            <validationRules:AlphaNumericSymbolsRule/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>            
            
            <Label Content="Display Number" Margin="0,10,0,0"/>
            <TextBox Text="{Binding Path=CurrentWorkFlow.DisplayNumber, UpdateSourceTrigger=PropertyChanged}"/>
            <Label Content="SIP Address" Margin="0,10,0,0"/>
            <StackPanel Orientation="Horizontal">
                <TextBox Text="{Binding Path=CurrentWorkFlow.Uri, UpdateSourceTrigger=PropertyChanged}" Width="130" Height="26"/>
                <Label>@</Label>
                <ComboBox ItemsSource="{Binding SipDomains, UpdateSourceTrigger=PropertyChanged}" SelectedValue="{Binding CurrentWorkFlow.SipDomain, UpdateSourceTrigger=PropertyChanged}" Width="125" Height="26"/>
            </StackPanel>
            <Label Content="Language" Margin="0,10,0,0"/>
            <ComboBox ItemsSource="{Binding Languages}" SelectedValuePath="Value" DisplayMemberPath="Key" SelectedValue="{Binding CurrentWorkFlow.Language, UpdateSourceTrigger=PropertyChanged}"/>
            <Label Content="Time Zone" Margin="0,8,0,0"/>
            <ComboBox ItemsSource="{Binding TimeZones}" SelectedValuePath="Value" DisplayMemberPath="Key" SelectedValue="{Binding CurrentWorkFlow.TimeZone, UpdateSourceTrigger=PropertyChanged}"/>
            <WrapPanel Orientation="Horizontal" Margin="0,0,0,0">
                <controls:ToggleSwitch 
                        IsChecked="{Binding CurrentWorkFlow.EnableWorkflow, UpdateSourceTrigger=PropertyChanged}"
                        HorizontalAlignment="Left"/>
                <Label Content="Enabled" VerticalAlignment="Center"/>
            </WrapPanel>
            <WrapPanel Orientation="Horizontal" Margin="0,0,0,0">
                <controls:ToggleSwitch 
                        IsChecked="{Binding CurrentWorkFlow.EnableForFederation, UpdateSourceTrigger=PropertyChanged}"
                        HorizontalAlignment="Left"/>
                <Label Content="Federation" VerticalAlignment="Center"/>
            </WrapPanel>
            <WrapPanel Orientation="Horizontal" Margin="0,0,0,0">
                <controls:ToggleSwitch 
                        IsChecked="{Binding CurrentWorkFlow.EnableAgentAnonymity, UpdateSourceTrigger=PropertyChanged}"
                        HorizontalAlignment="Left"/>
                <Label Content="Agent Anonymity" VerticalAlignment="Center"/>
            </WrapPanel>
        </StackPanel>

        <StackPanel Grid.Column="0" Grid.Row="4" Grid.ColumnSpan="2" Margin="10,5,3,5" Background="#00AEDE">
            <Label Content="Queuing Mode" Foreground="White"/>
        </StackPanel>

        <StackPanel Grid.Column="0" Grid.Row="5" Orientation="Vertical" Margin="10,10,10,0">
            <!--TextBoxes bine to this so they dont auto grow with rest of the app-->
            <Border x:Name="BorderColumn0" Margin="5"/>

            <WrapPanel Orientation="Horizontal" Margin="0,0,0,0">
                <controls:ToggleSwitch IsChecked="{Binding CurrentWorkFlow.EnableIVRMode, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" Name="EnableIvrMode"/>
                <Label Content="IVR Mode" VerticalAlignment="Center"/>
            </WrapPanel>
            <Label IsEnabled="{Binding CurrentWorkFlow.EnableIVRMode}" Content="IVR Message"/>

            <TextBox Text="{Binding CurrentWorkFlow.IvrMessage, UpdateSourceTrigger=PropertyChanged}"  Width="{Binding ActualWidth, ElementName=BorderColumn0}" Height="100" HorizontalAlignment="Stretch" TextWrapping="Wrap" AcceptsReturn="True">
                <TextBox.IsEnabled>
                    <MultiBinding Converter="{StaticResource MultiValueBoolConverter}">
                        <Binding Path="CurrentWorkFlow.AudioIvr"  Converter="{StaticResource NullToBooleanTrue}"/>
                        <Binding ElementName="EnableIvrMode" Path="IsChecked"/>
                    </MultiBinding>
                </TextBox.IsEnabled>
            </TextBox>
            <!--IsEnabled="{Binding Path=CurrentWorkFlow.AudioWelcome, Converter={StaticResource NullToBooleanTrue}}"-->
            <WrapPanel Orientation="Horizontal">
                <Button Focusable="False" IsEnabled="{Binding CurrentWorkFlow.EnableIVRMode}" Command="{Binding OnButtonClickCommand}" CommandParameter="AudioIvrSelector">Select Audio</Button>
                <Button Focusable="False" IsEnabled="{Binding CurrentWorkFlow.EnableIVRMode}" Command="{Binding OnButtonClickCommand}" CommandParameter="AudioIvrRemove" Width="26">X</Button>
            </WrapPanel>
            <Label IsEnabled="{Binding CurrentWorkFlow.EnableIVRMode}" Content='{Binding CurrentWorkFlow.AudioIvr, TargetNullValue="None Selected"}' VerticalAlignment="Center" Name="AudioIvrLabel"/>
            <Label IsEnabled="{Binding CurrentWorkFlow.EnableIVRMode}" Content="IVR Options" Margin="0,10,0,0"/>
            <Button Focusable="False" IsEnabled="{Binding CurrentWorkFlow.EnableIVRMode}" Command="{Binding CurrentWorkFlow.AddIvrRootCommand}" HorizontalAlignment="Left">Add Option</Button>
        </StackPanel>

        <StackPanel Grid.Column="1" Grid.Row="5" Orientation="Vertical" Margin="10,40,10,0">
            <Label IsEnabled="{Binding Path=CurrentWorkFlow.EnableIVRMode, Converter={StaticResource InverseBooleanConverter}}" Content="Queue" Margin="0,0,0,0"/>
            <ComboBox IsEnabled="{Binding Path=CurrentWorkFlow.EnableIVRMode, Converter={StaticResource InverseBooleanConverter}, UpdateSourceTrigger=PropertyChanged}"  ItemsSource="{Binding Queues}" Name="QueueComboBox" DisplayMemberPath="Name" SelectedItem="{Binding CurrentWorkFlow.Queue, UpdateSourceTrigger=PropertyChanged}" Height="26"/>
            <WrapPanel Orientation="Horizontal" Margin="0,10,0,0">
                <Button Focusable="False" Command="{Binding OnButtonClickCommand}" CommandParameter="AudioHoldMusicSelector">Select Music</Button>
                <Button Focusable="False" Command="{Binding OnButtonClickCommand}" CommandParameter="AudioHoldMusicRemove" Width="26">X</Button>
            </WrapPanel>
            <Label Content='{Binding CurrentWorkFlow.AudioHoldMusic, TargetNullValue="Default Music"}' VerticalAlignment="Center"/>
        </StackPanel>

        <StackPanel Grid.Column="1" Grid.Row="3" Margin="10,10,10,0">
            <!--TextBoxes bine to this so they dont auto grow with rest of the app-->
            <Border x:Name="BorderColumn1" Margin="5,0,5,0"/>
            <Label Content="Pool"/>
            <ComboBox ItemsSource="{Binding Pools, UpdateSourceTrigger=PropertyChanged}"  SelectedItem="{Binding CurrentWorkFlow.OwnerPool, UpdateSourceTrigger=PropertyChanged}"/>
            <Label Content="Description"/>
            <TextBox Text="{Binding Path=CurrentWorkFlow.Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                     Width="{Binding ActualWidth, ElementName=BorderColumn1}" Height="100" 
                     HorizontalAlignment="Stretch" TextWrapping="Wrap" AcceptsReturn="True" 
                     controls:TextBoxHelper.Watermark="Required"/>
            
            <Label Content="Welcome Message"/>
            <!--<TextBox Text="{Binding Path=CurrentWorkFlow.WelcomeMessage }" TextWrapping ="Wrap" Height="100"/>-->
            <!--http://stackoverflow.com/questions/386039/wpf-textbox-and-scroll-behavior-->
            <TextBox IsEnabled="{Binding Path=CurrentWorkFlow.AudioWelcome, Converter={StaticResource NullToBooleanTrue}}" 
                     Text="{Binding Path=CurrentWorkFlow.WelcomeMessage, UpdateSourceTrigger=PropertyChanged}" Width="{Binding ActualWidth, ElementName=BorderColumn1}" 
                     Height="100" HorizontalAlignment="Stretch" TextWrapping="Wrap" AcceptsReturn="True" controls:TextBoxHelper.Watermark="Required"/>

            <WrapPanel Orientation="Horizontal">
                <Button Focusable="False" Command="{Binding OnButtonClickCommand}" CommandParameter="AudioWelcomeSelector">Select Audio</Button>
                <Button Focusable="False" Command="{Binding OnButtonClickCommand}" CommandParameter="AudioWelcomeRemove" Width="26">X</Button>
            </WrapPanel>
            <Label Content='{Binding CurrentWorkFlow.AudioWelcome, TargetNullValue="None Selected"}' VerticalAlignment="Center"/>
        </StackPanel>

        <StackPanel Grid.Column="2" Grid.Row="3" Margin="10,10,10,0">
            <WrapPanel>
                <Label Content="Business Hours Group"/>
                <!--<CheckBox IsChecked="{Binding CurrentWorkFlow.EnableBusinessHours}" Content=""/>-->
                <!--<Label Visibility="{Binding Path=CurrentWorkFlow.EnableBusinessHours, Converter={StaticResource BooleanToVisibilityConverter}}"  Content="*open 24/7" FontSize="10"/>-->
                <Label Visibility="{Binding CurrentWorkFlow.BusinessHoursGroup, Converter={StaticResource NullToVisibilityConverter}}"  Content="*open 24/7" FontSize="10"/>
            </WrapPanel>
            <!--TextBoxes bind to this so they dont auto grow with rest of the app-->
            <Border x:Name="BorderColumn2" Margin="5,0,5,0"/>

            <!--<ComboBox IsEnabled="{Binding CurrentWorkFlow.EnableBusinessHours}" Height="26" ItemsSource="{Binding BusinessHoursGroups}" DisplayMemberPath="Name" SelectedItem="{Binding CurrentWorkFlow.BusinessHoursGroup}" />-->
            <ComboBox Height="26" ItemsSource="{Binding BusinessHoursGroups}" DisplayMemberPath="Name" SelectedItem="{Binding CurrentWorkFlow.BusinessHoursGroup, UpdateSourceTrigger=PropertyChanged}" />
            <Label Content="Outside of Hours Message"/>
            <TextBox IsEnabled="{Binding Path=CurrentWorkFlow.AudioAfterHours, Converter={StaticResource NullToBooleanTrue}, UpdateSourceTrigger=PropertyChanged}" Text="{Binding Path=CurrentWorkFlow.AfterHoursMessage}"  Width="{Binding ActualWidth, ElementName=BorderColumn2}" Height="100" HorizontalAlignment="Stretch" TextWrapping="Wrap" AcceptsReturn="True"/>

            <WrapPanel Orientation="Horizontal">
                <Button Focusable="False" Command="{Binding OnButtonClickCommand}" CommandParameter="AudioAfterHoursSelector" Content="Select Audio"/>
                <Button Focusable="False" Command="{Binding OnButtonClickCommand}" CommandParameter="AudioAfterHoursRemove" Content="X" Width="26"/>
            </WrapPanel>
            <Label Content='{Binding CurrentWorkFlow.AudioAfterHours, TargetNullValue="None Selected"}' VerticalAlignment="Center"/>

            <Label Content="Outside of business hours send to" Margin="0,8,0,0"/>
            <ComboBox ItemsSource="{Binding Destinations}" SelectedValuePath="Value" DisplayMemberPath="Key" SelectedValue="{Binding CurrentWorkFlow.AfterHoursDestination, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" Width="140" Height="26" Margin="0,0,0,10"/>
            <StackPanel Orientation="Horizontal">
                <TextBox Text="{Binding Path=CurrentWorkFlow.AfterHoursUri, UpdateSourceTrigger=PropertyChanged}" Width="140" Height="26"/>
                <Label Content="@"/>
                <ComboBox ItemsSource="{Binding SipDomains}" SelectedItem="{Binding CurrentWorkFlow.AfterHoursSipDomain, UpdateSourceTrigger=PropertyChanged}" Width="116" Height="26"/>
            </StackPanel>

            <!--AUTO-COMPLETE START-->
            <StackPanel>

                <StackPanel Orientation="Vertical">
                    <!--<StackPanel Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="0,10,0,0">-->
                        <!--<TextBox IsEnabled="{Binding IsEnabled}" VerticalAlignment="Top" Height="24" Width="240" Text="{Binding SearchQuery, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />-->
                        <!--<Button Focusable="False" IsEnabled="{Binding IsEnabled}" VerticalAlignment ="Top" Command="{Binding RemoveSearchCommand}" Height="26" Width="26" Margin="5, 0, 5, 0">X</Button>-->
                    <!--</StackPanel>-->
                    <Popup IsOpen="{Binding PopupOpen}" StaysOpen="False" Width="450" MaxHeight="400" PlacementTarget="{Binding ElementName=SearchTextBox}">
                        <Border Background="White">
                            <ScrollViewer>

                                <StackPanel Orientation="Vertical">
                                    <StackPanel Background="#00AEDE">
                                        <TextBlock Foreground="White" Text="Numbers" 
                                           HorizontalAlignment="Left" 
                                           Padding="1" />
                                    </StackPanel>

                                    <DataGrid Style="{StaticResource DataGridStyle}" ColumnHeaderStyle="{StaticResource DataGridColumnHeaderStyle}" ItemsSource="{Binding NumbersFiltered}" SelectedItem="{Binding AutoCompleteSelection}" AutoGenerateColumns="False">
                                        <DataGrid.Columns>
                                            <DataGridTextColumn Header="DDI" Binding="{Binding DDI}" />
                                            <DataGridTextColumn Header="Extension"  Binding="{Binding Ext}" />
                                            <DataGridTextColumn Header="Assigned To"  Binding="{Binding AssignedTo}" />
                                        </DataGrid.Columns>
                                    </DataGrid>

                                    <TextBlock Text="No search results for numbers" 
                                           HorizontalAlignment="Center" 
                                           Padding="2"
                                           FontSize="12"
                                           Visibility="{Binding Path=NumbersFiltered.Count, Converter={StaticResource NoDataConverter}}" />


                                    <StackPanel Background="#00AEDE">
                                        <TextBlock Foreground="White"  Text="Users" 
                                           HorizontalAlignment="Left" 
                                           Padding="1" />
                                    </StackPanel>

                                    <DataGrid Style="{StaticResource DataGridStyle}" ColumnHeaderStyle="{StaticResource DataGridColumnHeaderStyle}" ItemsSource="{Binding UsersFiltered}" SelectedItem="{Binding AutoCompleteSelection}" AutoGenerateColumns="False">
                                        <DataGrid.Columns>
                                            <DataGridTextColumn Header="Name" Binding="{Binding DisplayName}" />
                                            <DataGridTextColumn Header="Sip Address"  Binding="{Binding SipAddress}" />
                                        </DataGrid.Columns>
                                    </DataGrid>

                                    <TextBlock Text="No search results for users" 
                                           HorizontalAlignment="Center" 
                                           Padding="2" 
                                           FontSize="12"
                                           Visibility="{Binding Path=UsersFiltered.Count, Converter={StaticResource NoDataConverter}}" />


                                    <StackPanel Background="#00AEDE">
                                        <TextBlock Foreground="White"  Text="Queues" 
                                           HorizontalAlignment="Left" 
                                           Padding="1" />
                                    </StackPanel>

                                    <DataGrid Style="{StaticResource DataGridStyle}" ColumnHeaderStyle="{StaticResource DataGridColumnHeaderStyle}" ItemsSource="{Binding QueuesFiltered}" SelectedItem="{Binding AutoCompleteSelection}" AutoGenerateColumns="False">
                                        <DataGrid.Columns>
                                            <DataGridTextColumn Header="Name" Binding="{Binding Name}" />
                                        </DataGrid.Columns>
                                    </DataGrid>

                                    <TextBlock Text="No search results for queues" 
                                           HorizontalAlignment="Center" 
                                           Padding="2" 
                                           FontSize="12"
                                           Visibility="{Binding Path=QueuesFiltered.Count, Converter={StaticResource NoDataConverter}}" />


                                    <StackPanel Background="#00AEDE">
                                        <TextBlock Foreground="White"  Text="Workflows" 
                                           HorizontalAlignment="Left" 
                                           Padding="1" />
                                    </StackPanel>

                                    <DataGrid Style="{StaticResource DataGridStyle}" ColumnHeaderStyle="{StaticResource DataGridColumnHeaderStyle}" ItemsSource="{Binding WfFiltered}" SelectedItem="{Binding AutoCompleteSelection}" AutoGenerateColumns="False">
                                        <DataGrid.Columns>
                                            <DataGridTextColumn Header="Name" Binding="{Binding Name}" />
                                            <DataGridTextColumn Header="Sip Address"  Binding="{Binding SipAddress}" />
                                        </DataGrid.Columns>
                                    </DataGrid>

                                    <TextBlock Text="No search results for workflows" 
                                           HorizontalAlignment="Center" 
                                           Padding="2" 
                                           FontSize="12"
                                           Visibility="{Binding Path=WfFiltered.Count, Converter={StaticResource NoDataConverter}}" />


                                </StackPanel>
                            </ScrollViewer>

                        </Border>
                    </Popup>
                </StackPanel>
            </StackPanel>
            <!--AUTO-COMPLETE END-->

            <StackPanel Margin="0,22,0,5" Background="#00AEDE">
                <Label Content="Holidays" Foreground="White"/>
            </StackPanel>

            <WrapPanel>
                <Label Content="Holidays Group"/>
                <CheckBox IsChecked="{Binding CurrentWorkFlow.EnableHolidays, UpdateSourceTrigger=PropertyChanged}" Content=""/>
            </WrapPanel>

            <ComboBox IsEnabled="{Binding CurrentWorkFlow.EnableHolidays}" Height="26"  ItemsSource="{Binding HolidaysGroups, UpdateSourceTrigger=PropertyChanged}" DisplayMemberPath="Name" SelectedItem="{Binding CurrentWorkFlow.HolidayGroup, UpdateSourceTrigger=PropertyChanged}"/>

        </StackPanel>

        <Label IsEnabled="{Binding CurrentWorkFlow.EnableHolidays}" Content="Holidays Message" Grid.Column="2" Grid.Row="4" Margin="10,0,0,0" VerticalAlignment="Center"/>


        <StackPanel Grid.Column="2" Grid.Row="5" Margin="10,0,10,0">

            <TextBox Text="{Binding Path=CurrentWorkFlow.HolidayMessage, UpdateSourceTrigger=PropertyChanged}"  Width="{Binding ActualWidth, ElementName=BorderColumn2}" Height="100" HorizontalAlignment="Stretch" TextWrapping="Wrap" AcceptsReturn="True">
                <TextBox.IsEnabled>
                    <MultiBinding Converter="{StaticResource MultiValueBoolConverter}">
                        <Binding Path="CurrentWorkFlow.AudioHolidays"  Converter="{StaticResource NullToBooleanTrue}"/>
                        <Binding Path="CurrentWorkFlow.EnableHolidays"/>
                    </MultiBinding>
                </TextBox.IsEnabled>
            </TextBox>

            <WrapPanel Orientation="Horizontal">
                <Button Focusable="False" IsEnabled="{Binding CurrentWorkFlow.EnableHolidays}"  Command="{Binding OnButtonClickCommand}" CommandParameter="AudioHolidaysSelector" Content="Select Audio"/>
                <Button Focusable="False" IsEnabled="{Binding CurrentWorkFlow.EnableHolidays}"  Command="{Binding OnButtonClickCommand}" CommandParameter="AudioHolidaysRemove" Content="X" Width="26"/>
            </WrapPanel>
            <Label IsEnabled="{Binding CurrentWorkFlow.EnableHolidays}" Content='{Binding CurrentWorkFlow.AudioHolidays, TargetNullValue="None Selected"}' VerticalAlignment="Center"/>

            <WrapPanel Orientation="Horizontal"/>

            <Label IsEnabled="{Binding CurrentWorkFlow.EnableHolidays}" Content="During holidays send to" Margin="0,8,0,0"/>
            <ComboBox IsEnabled="{Binding CurrentWorkFlow.EnableHolidays}"  ItemsSource="{Binding Destinations}" SelectedValuePath="Value" DisplayMemberPath="Key" SelectedValue="{Binding CurrentWorkFlow.HolidayDestination, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" Width="145" Height="26"  Margin="0,0,0,10"/>

            <StackPanel Orientation="Horizontal">
                <TextBox IsEnabled="{Binding CurrentWorkFlow.EnableHolidays}" Text="{Binding Path=CurrentWorkFlow.HolidayUri, UpdateSourceTrigger=PropertyChanged}" Width="145" Height="26"/>
                <Label IsEnabled="{Binding CurrentWorkFlow.EnableHolidays}" Content="@"/>
                <ComboBox IsEnabled="{Binding CurrentWorkFlow.EnableHolidays}" ItemsSource="{Binding SipDomains}" SelectedItem="{Binding CurrentWorkFlow.HolidaySipDomain, UpdateSourceTrigger=PropertyChanged}" Width="110" Height="26"/>
            </StackPanel>

        </StackPanel>


        <StackPanel Grid.Row="6" Grid.Column ="0" Grid.ColumnSpan="3" Margin="0,10,10,10" Name="StackPanelDynamic" Visibility="{Binding CurrentWorkFlow.EnableIVRMode, Converter={StaticResource BoolToVis}}">
            <TreeView Margin="0,12,0,0" ItemsSource="{Binding CurrentWorkFlow.IvrOptions}">
                <TreeView.ItemContainerStyle>
                    <Style TargetType="{x:Type TreeViewItem}">
                        <Setter Property="IsExpanded" Value="True"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding CanAddChildNodes}" Value="false">
                                <Setter Property="TreeViewItem.Margin" Value="40,0,0,0" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding CanAddChildNodes}" Value="true">
                                <Setter Property="TreeViewItem.Margin" Value="0,0,0,0" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TreeView.ItemContainerStyle>
                <TreeView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type workFlows:IvrViewModel}" ItemsSource="{Binding Path=ChildIvrNodes}">
                        <StackPanel Orientation="Vertical">
                            <StackPanel Orientation="Horizontal">
                                <ComboBox SelectedItem="{Binding Path=Number, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding Numbers}" Height="26" Margin="5"/>
                                <TextBox Text="{Binding Path=Name, UpdateSourceTrigger=PropertyChanged}" MinWidth="300" Height="26"/>
                                <ComboBox  ItemsSource="{Binding Path=ItemsSource, ElementName=QueueComboBox }" SelectedItem="{Binding InvoiceQueue, UpdateSourceTrigger=PropertyChanged}"
                                       DisplayMemberPath="Name" Width ="380" Height="26" Margin="5"/>
                                <Button Focusable="False" Command="{Binding AddIvrCommand}" Visibility="{Binding CanAddChildNodes, Converter={StaticResource BoolToVis}}" Height="26" Width="26" Margin="5">+</Button>
                                <Button Focusable="False" Command="{Binding RemoveIvrCommand}" Height="26" Width="26" Margin="5">-</Button>
                            </StackPanel>
                            <StackPanel Margin="63,0,0,0" Orientation="Vertical" Visibility="{Binding ParentHasChild, Converter={StaticResource BoolToVis}}">
                                <Label Content="IVR Message"/>
                                <StackPanel>
                                    <WrapPanel>
                                        <TextBox IsEnabled="{Binding Path=AudioIvrTree, Converter={StaticResource NullToBooleanTrue}}" Text="{Binding TextIvrMessage, UpdateSourceTrigger=PropertyChanged}" Width="357" Height="80" TextWrapping="Wrap"></TextBox>
                                        <Button Focusable="False" Command="{Binding AudioIvrTreeSelectorCommand}" Margin="10, 0, 0, 0" VerticalAlignment="Top">Select Audio</Button>
                                        <Button Focusable="False" Command="{Binding AudioIvrTreeRemoveCommand}" Margin="10, 0, 0, 0" VerticalAlignment="Top" Width="26">X</Button>
                                        <StackPanel>
                                            <Label Content="{Binding AudioIvrTree}" VerticalAlignment="Top"/>
                                        </StackPanel>
                                    </WrapPanel>
                                </StackPanel>
                            </StackPanel>
                        </StackPanel>
                    </HierarchicalDataTemplate>
                </TreeView.Resources>
            </TreeView>
        </StackPanel>
    </Grid>
</UserControl>